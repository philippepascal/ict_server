use clap::{Parser, Subcommand};

#[derive(Parser, Debug)]
#[command(name = "ict_server")]
#[command(about = "Runs the ICT server", long_about = None)]
pub struct Args {
    #[arg(
        short,
        long,
        value_name = "PATH-TO-FILE",
        default_value = "configs/ict_server.toml"
    )]
    pub config: String,

    #[command(subcommand)]
    pub operation: Operation,
}

#[derive(Subcommand, Debug)]
pub enum Operation {
    #[command(about = "Register a new client with the server")]
    Register {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
        #[arg(short, long, value_name = "PEM public key of client")]
        public_key: String,
    },
    #[command(about = "Authorize a previously registered client")]
    Authorize {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
    },
    #[command(about = "Temporarily un-authorize a client (can be re-authorized)")]
    Unauthorize {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
    },
    #[command(about = "Permanently delete a client")]
    Delete {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
    },
    #[command(about = "Operate client's relays after message validation")]
    Operate {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
        #[arg(short, long, value_name = "encrytped TOTP message generated by client")]
        message: String,
    },
    #[command(about = "Lists all clients")]
    List_Clients,
    #[command(about = "Displays info and status of a client")]
    Describe_Client {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
    },
    #[command(about = "Associates a relay with a client")]
    Associate_Relay {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
        #[arg(short, long, value_name = "id of relay")]
        relay: u32,
    },
    #[command(about = "Removes all relay of a client")]
    Clear_Relays {
        #[arg(short, long, value_name = "UUID of client")]
        uuid: String,
    },
    #[command(about = "Starts Web Server listening for clients")]
    Serve {
        #[arg(short, long, value_name = "listening port")]
        port: u32,
    },
}

pub fn load_args() -> Args {
    Args::parse()
}
